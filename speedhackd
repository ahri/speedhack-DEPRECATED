#!/bin/bash

##########################################################################
# ASSUMPTIONS
#
# 1) No allowance is made for the situation where a directory you wish to
#    speedhack is not held on the root device -- bindings are made to the
#    root device only
#
# 2) Due to technical limitations hardlinks cannot be copied over multiple
#    devices, as such this functionality is missing
#
# 3) The code assumes that the mount type will be one of those whose mount
#    source always equals its mount type (e.g. tmpfs, ramfs)
#
# 4) Building upon assumption (3), it is assumed that the mount type will
#    grow dynamically as data is added
#
##########################################################################

##########################################################################
# NOTE
##########################################################################
# tmpfs = RAM/SWAP
# ramfs = RAM
##########################################################################

config_file="/etc/speedhack.conf"
action="$1"


# mode can be "TEST" or other
# when in test mode mirroring occurs from physical->memory and no
# root re-binding occurs


##########################################################################
# Utility functions
##########################################################################

info()
{
        local str=$1

        shift
        printf "INFO: $str\n" "$@"
}

warning()
{
        local str=$1

        shift
        printf "WARNING: $str\n" "$@"
}

error()
{
        local str=$1

        shift
        printf "ERROR: $str\n" "$@" 1>&2
        exit 1
}

# Handle kill signals by terminating mirroring and closing gracefully
# TODO: note that we need to figure out how to unmount stuff more forcefully -- kill off stuff with lsof???
killed()
{
        for pid in "${pids[@]}"; do
                kill -TERM -"$pid"
        done
}
set -m
trap "killed" SIGINT SIGTERM KILL

wait_on_mirrors()
{
        if [[ ${#pids[@]} -gt 0 ]]; then
                info "waiting for spawned processes to end: %s" "$(echo "${pids[@]}" | tr '\n' ' ')"
                wait
        else
                info "waiting for user input to end manager"
                read
        fi
}

config()
{
        system_dirs=()

        local config_file="$1"
        local all_cfg_vars=()
        local req_cfg_vars=()
        local key=
        local val=
        local var=
        local found=
        local missing=0

        shift
        # build up all_cfg_vars and reg_cfg_vars
        while [[ ! -z $1 ]]; do
                [[ $1 = @* ]] && req_cfg_vars=("${req_cfg_vars[@]}" "${1#@}")
                all_cfg_vars=("${all_cfg_vars[@]}" "${1#@}")
                shift
        done

        if [[ ! -r "$config_file" ]]; then
                error "readable config file '%s' is required to run this script" "$config_file"
        fi

        # set some variables from config data
        local IFS="="
        while read -r key val; do
                ([[ -z $key ]] || [[ $key = \#* ]]) && continue

                found=0
                for var in "${all_cfg_vars[@]}"; do
                        [[ $var = $key ]] && found=1
                done

                if [[ $found -eq 0 ]]; then
                        info "ignoring unrecognised config key '%s'" "$key"
                        continue
                fi

                if [[ -z $val ]]; then
                        info "config key '%s' has no value set, ignoring" "$key"
                        continue
                fi

                if [[ "$key" = "dir" ]]; then
                        #info "Found directory '%s' in config file" "$val"
                        # build the system_dirs array
                        system_dirs=("${system_dirs[@]}" "$val")
                else
                        #info "Setting '%s' to '%s' from config file" "$key" "$val"
                        # set other vars
                        [[ -z ${!key} ]] || warning "value for key '%s' previously set to '%s', re-setting to '%s'" "${!key}" "$val"
                        eval "$key=\"\$val\""
                fi
        done < "$config_file"

        # test that all required variable are set
        for var in "${req_cfg_vars[@]}"; do
                if [[ -z ${!var} ]]; then
                        missing=1
                        warning "config variable '%s' is required to run this script" "$var"
                fi
        done

        [[ missing -eq 0 ]] || error "missing cfg options"
}

##########################################################################
# Action definitions
##########################################################################

a_mirror_dir()
{
        local dir_source="$1"
        local dir_target="$2"

        local file_source=
        local file_target=
        local event=

        [[ -d $dir_source ]] || error "directory '%s' is invalid" "$dir_source"
        [[ -d $dir_target ]] || error "directory '%s' is invalid" "$dir_target"

        # there is a bug in inotifywait on ubuntu 9.10 whereby the date doesn't get output, so i'm ditching the date
        #inotifywait -mrq --timefmt '%Y%m%d%H%M%S' --format '%T %e %w%f' -e close_write,create,delete "$dir_source" | while read datetime event file_source; do
        inotifywait -mrq --format '%e %w%f' -e close_write,create,delete "$dir_source" | while read event file_source; do
                [[ -z $file_source    ]] && error "file_source not set, this implies unknown input from inotifywait"
                [[ $event = "IGNORED" ]] && continue

                # generate a log
                file_target="$dir_target${file_source#$dir_source}"
                #printf "EVENT: %s %s '%s' -> '%s'\n" "$datetime" "$event" "$file_source" "$file_target"
                printf "EVENT: %s '%s' -> '%s'\n" "$event" "$file_source" "$file_target"

                if   [[ $event = "DELETE"       ]]; then
                        rm -f "$file_target"

                elif [[ $event = "DELETE,ISDIR" ]]; then
                        rm -rf "$file_target"

                else
                        rsync -ax "$file_source" "$file_target"
                fi
        done
}

a_pid_file()
{
        local pid_file="$1"

        echo "$pid_file"

        return 0
}

a_bind_root()
{
        local real_root_dir="$1"

        mkdir -p "$real_root_dir" 2> /dev/null
        a_bind_dir "/" "$real_root_dir"

        return 0
}

a_unbind_root()
{
        local real_root_dir="$1"

        a_unbind_dir "$real_root_dir"

        return 0
}

a_bind_dir()
{
        local source_dir="$1"
        local target_dir="$2"

        info "binding '%s' to '%s'" "$source_dir" "$target_dir"
        mount -o bind "$source_dir" "$target_dir" || error "mount failed"

        return 0
}

a_unbind_dir()
{
        local target_dir="$1"

        info "unbinding '%s'" "$target_dir"
        umount "$target_dir" || error "umount failed"

        return 0
}

a_mount_dir()
{
        local inmemory_mirror_dir="$1"
        local mount_type="$2"
        local inmemory_dir="$3"

        # make the required directories
        mkdir -p "$inmemory_mirror_dir" 2> /dev/null

        # make the mirror dir
        mkdir -p "$inmemory_dir" 2> /dev/null

        if [[ ! -d $inmemory_dir ]]; then
                warning "directory '%s' does not exist; ignoring" "$inmemory_dir"
                continue
        fi

        info "mounting mirror '%s' as type '%s'" "$inmemory_dir" "$mount_type"
        mount -t "$mount_type" "$mount_type" "$inmemory_dir" || error "mount failed"

        return 0
}

a_unmount_dir()
{
        local inmemory_dir="$1"

        info "unmounting mirror '%s'" "$inmemory_dir"
        umount "$inmemory_dir" || error "unmount failed"

        return 0
}

a_sync()
{
        local source_dir="$1"
        local target_dir="$2"

        if   [[ ! -d $source_dir ]]; then
                warning "directory '%s' does not exist; ignoring" "$source_dir"
                return 1

        elif [[ ! -d $target_dir ]]; then
                warning "directory '%s' does not exist; ignoring" "$target_dir"
                return 1
        fi

        info "syncing '%s' -> '%s'" "$source_dir/" "$target_dir/"
        rsync -ax --delete --force "$source_dir/" "$target_dir/" || error "rsync failed"

        return 0
}

a_mirror()
{
        local physical_dir="$1"
        local inmemory_dir="$2"
        local mode="$3"

        local pid=

        # writes to globals:
        #     pids[]

        # spawn a process to mirror back changes from the inmemory dir to the
        # physical dir
        case "$mode" in
                "TEST")
                        speedhackd mirror_dir "$physical_dir" "$inmemory_dir" &
                        pid=$!
                        pids=("${pids[@]}" "$pid")

                        info "SPAWNED: %s, mirroring '%s' -> '%s'" "$pid" "$physical_dir" "$inmemory_dir"
                        info "to test this, make some changes to '%s' and then execute:" "$physical_dir"
                        info "        rsync -nax --delete --force '%s' '%s'" "$physical_dir/" "$inmemory_dir/"
                        ;;
                *)
                        speedhackd mirror_dir "$inmemory_dir" "$physical_dir" &
                        pid=$!
                        pids=("${pids[@]}" "$pid")

                        info "SPAWNED: %s, mirroring '%s' -> '%s'" "$pid" "$inmemory_dir" "$physical_dir"
                        ;;
        esac

        return 0
}

a_kill_mirror()
{
        local pid_file="$1"

        [[ -r "$pid_file" ]]      || error "pid_file '%s' does not exist" "$pid_file"
        kill "$(cat "$pid_file")" || error "kill failed"

        return 0
}

##########################################################################
# Checks on dependency existence
##########################################################################

if ! which rsync 2>&1 > /dev/null; then
        error "rsync is required to run this script"
fi

if ! which inotifywait 2>&1 > /dev/null; then
        error "inotifywait (inotify-tools) is required to run this script"
fi

if ! which speedhackd 2>&1 > /dev/null; then
        error "speedhackd is required to run this script"
fi

##########################################################################
# Program setup
##########################################################################

# set up required variables from config file
config "$config_file" @pid_file @log_file @mount_type @real_root_dir @inmemory_mirror_dir dir mode

# check that cfg specified directories exist
[[ -d `dirname "$pid_file"` ]] || error "directory for pid_file '%s' does not exist" "$pid_file"
[[ -d `dirname "$log_file"` ]] || error "directory for log_file '%s' does not exist" "$log_file"

##########################################################################
# Business logic
##########################################################################

case "$action" in
        mirror_dir)
                shift
                a_mirror_dir "$1" "$2"
                ;;

        pid_file)
                a_pid_file "$pid_file"
                ;;

        bind_root)
                a_bind_root "$real_root_dir"
                ;;

        unbind_root)
                a_unbind_root "$real_root_dir"
                ;;

        mount_dirs|unmount_dirs|sync|sync_back|bind_dirs|unbind_dirs|mirror)
                # instanciate global pids[]
                pids=()

                # loop over dirs given in config and execute actions
                for system_dir in "${system_dirs[@]}"; do
                        if [[ $system_dir = @* ]]; then
                                ro=1
                        else
                                ro=0
                        fi

                        system_dir="${system_dir#@}"
                        physical_dir="$real_root_dir$system_dir"
                        inmemory_dir="$inmemory_mirror_dir$system_dir"


                        if   [[ $action = "mount_dirs"   ]]; then
                                a_mount_dir "$inmemory_mirror_dir" "$mount_type" "$inmemory_dir"

                        elif [[ $action = "unmount_dirs" ]]; then
                                a_unmount_dir "$inmemory_dir"

                        elif [[ $action = "sync"         ]]; then
                                a_sync "$physical_dir" "$inmemory_dir"

                        elif [[ $action = "sync_back"    ]] &&
                             [[ $ro -eq 0 ]]; then
                                a_sync "$inmemory_dir" "$physical_dir"

                        elif [[ $action = "bind_dirs"    ]]; then
                                a_bind_dir "$inmemory_dir" "$system_dir"

                        elif [[ $action = "unbind_dirs"  ]]; then
                                a_unbind_dir "$system_dir"

                        elif [[ $action = "mirror"       ]] &&
                             [[ $ro -eq 0                ]]; then
                                a_mirror "$physical_dir" "$inmemory_dir" "$mode"
                        fi
                done

                if [[ $action = "mirror" ]]; then
                        wait_on_mirrors
                fi
                ;;

        kill_mirror)
                a_kill_mirror "$pid_file"
                ;;

        daemon)
                speedhackd "bind_root"  >> "$log_file" 2>&1 &&
                speedhackd "mount_dirs" >> "$log_file" 2>&1 &&
                speedhackd "sync"       >> "$log_file" 2>&1 &&
                speedhackd "bind_dirs"  >> "$log_file" 2>&1 &&
                speedhackd "mirror"     >> "$log_file" 2>&1 &

                err=$?
                echo $! > "$pid_file"

                exit $?
                ;;

        kill_daemon)
                speedhackd "kill_mirror"  >> "$log_file" 2>&1 &&
                speedhackd "unbind_dirs"  >> "$log_file" 2>&1 &&
                speedhackd "sync_back"    >> "$log_file" 2>&1 &&
                speedhackd "unmount_dirs" >> "$log_file" 2>&1 &&
                speedhackd "unbind_root"  >> "$log_file" 2>&1

                exit $?
                ;;

        *)
                info "action must be one of:"
                info ""
                info "    mirror_dir <s> <t> -- mirror changes from a source directory to a target directory"
                info "    pid_file           -- echo pid_file from cfg"
                info ""
                info "    bind_root          -- bind the root to the specified real_root_dir"
                info "    mount_dirs         -- mount all in-memory dirs"
                info "    sync               -- copy system directories to their in-memory counterparts"
                info "    bind_dirs          -- bind system directories to their in-memory counterparts"
                info "    mirror             -- mirror back changes in specified in-memory directories to the system"
                info ""
                info "    kill_mirror        -- send the kill signal to the existing mirror process"
                info "    unbind_dirs        -- remove system bindings"
                info "    sync_back          -- copy back any missed changes"
                info "    unmount_dirs       -- unmount in-memory directories"
                info "    unbind_root        -- unbind system root"
                info ""
                info "    daemon             -- perform bind_root, mount_dirs, sync, bind_dirs and fork mirror"
                info "    kill_daemon        -- perform kill_mirror, unbind_dirs, sync_back, unmount_dirs, unbind_root"
                info ""
                error "unrecognised action '%s'" "$action"
                ;;
esac

exit 0
